openapi: 3.0.3
info:
  title: My little restaraunt
  license:
    name: MIT
  version: 1.0.0
servers:
  - url: http://localhost:8080/
tags:
  - name: restaraunt
    description: Restaraunt serivce operations
  - name: user
    description: User service operations
paths:
  /user:
    post:
      tags:
        - user
      operationId: createUser
      description: Create a new user
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericApiResponse"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericApiResponse"
        '400':
          description: Very much not OK and it's your failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericApiResponse"
    get:
      tags:
        - user
      operationId: retriveUser
      description: Get info about current user (from JWT)
      security:
        - jwt: []
      responses:
        '200':
          description: Existing user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: No JWT / Invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericApiResponse"
  /user/login:
    post:
      tags:
        - user
      operationId: loginUser
      description: Login a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_wick
                password:
                  type: string
                  example: 'woofwoof'
      responses:
        '200':
          description: OK
          headers:
            Authorization:
              schema:
                type: string
              description: JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericApiResponse"
        '403':
          description: Wrong auth data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericApiResponse"
  /order/create:
    post:
      tags:
        - restaraunt
      operationId: createOrder
      description: Create an order
      security:
        - jwt: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dishes:
                  type: array
                  items:
                    $ref: '#/components/schemas/CountedDish'
                comment:
                  type: string
                  example: "Лектора прожарьте лучше, чем в прошлый раз"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        '403':
          description: Wrong auth data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericApiResponse"
        '400':
          description: Can't reserve order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericApiResponse"
  /order/{orderId}:
    get:
      tags:
        - restaraunt
      operationId: getOrder
      description: Get current information about an order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  dishes:
                    type: array
                    items:
                      $ref: '#/components/schemas/CountedDish'
                  comment:
                    type: string
                    example: "Лектора прожарьте лучше, чем в прошлый раз"
                  status:
                    type: string
                    enum: ["queued", "processed", "done"]
                  author:
                    type: integer
        '404':
          description: Wrong id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericApiResponse"
        
      
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: john_wick
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 'woofwoof'
        isManager:
          type: boolean
    GenericApiResponse:
      type: object
      properties:
        message:
          type: string
    CountedDish:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: integer
    
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT